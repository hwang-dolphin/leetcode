/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static void dfs(TreeNode * & ptr, vector<int> & myPaths, string & number)
    {
        if (ptr == 0)
        {
            return;
        }
        
        number.append(to_string(ptr->val));
        
        if (ptr->left == 0 && ptr->right == 0)
        {
            myPaths.push_back(stoi(number));
            return;
        }
        
        else
        {
            if (ptr->left != 0)
            {
                dfs(ptr->left, myPaths, number);
                number.erase(number.end() - 1);
            }
            
            if (ptr->right != 0)
            {
                dfs(ptr->right, myPaths, number);
                number.erase(number.end() - 1);
            }
        }
    }
    
    int sumNumbers(TreeNode* root) 
    {
        int result = 0;
        
        vector<int> myPaths;
        string number;
    
        dfs(root, myPaths, number);
        
        for (auto i: myPaths)
        {
            result = result + i;
        }
        
        return result;
    }
};
